/*
Copyright (C) 2018-2019 de4dot@gmail.com

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

use core::fmt;

#[cfg(any(feature = "instr_info", feature = "encoder"))]
pub use self::info::*;

#[cfg(any(feature = "instr_info", feature = "encoder"))]
mod info {
	use super::super::iced_constants::IcedConstants;
	use super::MemorySize;

	#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
	pub(super) static MEMORY_SIZE_INFOS: &[MemorySizeInfo; IcedConstants::NUMBER_OF_MEMORY_SIZES] = &[
		// GENERATOR-BEGIN: MemorySizeInfoTable
		// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
		MemorySizeInfo { size: 0, element_size: 0, memory_size: MemorySize::Unknown, element_type: MemorySize::Unknown, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 1, element_size: 1, memory_size: MemorySize::UInt8, element_type: MemorySize::UInt8, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 2, element_size: 2, memory_size: MemorySize::UInt16, element_type: MemorySize::UInt16, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::UInt32, element_type: MemorySize::UInt32, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::UInt52, element_type: MemorySize::UInt52, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::UInt64, element_type: MemorySize::UInt64, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 16, memory_size: MemorySize::UInt128, element_type: MemorySize::UInt128, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 32, memory_size: MemorySize::UInt256, element_type: MemorySize::UInt256, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 64, memory_size: MemorySize::UInt512, element_type: MemorySize::UInt512, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 1, element_size: 1, memory_size: MemorySize::Int8, element_type: MemorySize::Int8, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 2, element_size: 2, memory_size: MemorySize::Int16, element_type: MemorySize::Int16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Int32, element_type: MemorySize::Int32, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Int64, element_type: MemorySize::Int64, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 16, memory_size: MemorySize::Int128, element_type: MemorySize::Int128, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 32, memory_size: MemorySize::Int256, element_type: MemorySize::Int256, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 64, memory_size: MemorySize::Int512, element_type: MemorySize::Int512, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::SegPtr16, element_type: MemorySize::SegPtr16, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 6, element_size: 6, memory_size: MemorySize::SegPtr32, element_type: MemorySize::SegPtr32, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 10, element_size: 10, memory_size: MemorySize::SegPtr64, element_type: MemorySize::SegPtr64, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 2, element_size: 2, memory_size: MemorySize::WordOffset, element_type: MemorySize::WordOffset, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::DwordOffset, element_type: MemorySize::DwordOffset, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::QwordOffset, element_type: MemorySize::QwordOffset, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 4, element_size: 2, memory_size: MemorySize::Bound16_WordWord, element_type: MemorySize::UInt16, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 4, memory_size: MemorySize::Bound32_DwordDword, element_type: MemorySize::UInt32, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Bnd32, element_type: MemorySize::Bnd32, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 16, memory_size: MemorySize::Bnd64, element_type: MemorySize::Bnd64, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 6, element_size: 6, memory_size: MemorySize::Fword6, element_type: MemorySize::Fword6, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 10, element_size: 10, memory_size: MemorySize::Fword10, element_type: MemorySize::Fword10, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 2, element_size: 2, memory_size: MemorySize::Float16, element_type: MemorySize::Float16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Float32, element_type: MemorySize::Float32, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Float64, element_type: MemorySize::Float64, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 10, element_size: 10, memory_size: MemorySize::Float80, element_type: MemorySize::Float80, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 16, memory_size: MemorySize::Float128, element_type: MemorySize::Float128, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 2, element_size: 2, memory_size: MemorySize::BFloat16, element_type: MemorySize::BFloat16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 14, element_size: 14, memory_size: MemorySize::FpuEnv14, element_type: MemorySize::FpuEnv14, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 28, element_size: 28, memory_size: MemorySize::FpuEnv28, element_type: MemorySize::FpuEnv28, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 94, element_size: 94, memory_size: MemorySize::FpuState94, element_type: MemorySize::FpuState94, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 108, element_size: 108, memory_size: MemorySize::FpuState108, element_type: MemorySize::FpuState108, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 512, element_size: 512, memory_size: MemorySize::Fxsave_512Byte, element_type: MemorySize::Fxsave_512Byte, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 512, element_size: 512, memory_size: MemorySize::Fxsave64_512Byte, element_type: MemorySize::Fxsave64_512Byte, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 0, element_size: 0, memory_size: MemorySize::Xsave, element_type: MemorySize::Xsave, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 0, element_size: 0, memory_size: MemorySize::Xsave64, element_type: MemorySize::Xsave64, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 10, element_size: 10, memory_size: MemorySize::Bcd, element_type: MemorySize::Bcd, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 64, memory_size: MemorySize::Tilecfg, element_type: MemorySize::Tilecfg, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 0, element_size: 0, memory_size: MemorySize::Tile, element_type: MemorySize::Tile, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 10, element_size: 10, memory_size: MemorySize::SegmentDescSelector, element_type: MemorySize::SegmentDescSelector, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 2, element_size: 1, memory_size: MemorySize::Packed16_UInt8, element_type: MemorySize::UInt8, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 2, element_size: 1, memory_size: MemorySize::Packed16_Int8, element_type: MemorySize::Int8, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 4, element_size: 1, memory_size: MemorySize::Packed32_UInt8, element_type: MemorySize::UInt8, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 4, element_size: 1, memory_size: MemorySize::Packed32_Int8, element_type: MemorySize::Int8, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 4, element_size: 2, memory_size: MemorySize::Packed32_UInt16, element_type: MemorySize::UInt16, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 4, element_size: 2, memory_size: MemorySize::Packed32_Int16, element_type: MemorySize::Int16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 4, element_size: 2, memory_size: MemorySize::Packed32_BFloat16, element_type: MemorySize::BFloat16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 1, memory_size: MemorySize::Packed64_UInt8, element_type: MemorySize::UInt8, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 1, memory_size: MemorySize::Packed64_Int8, element_type: MemorySize::Int8, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 2, memory_size: MemorySize::Packed64_UInt16, element_type: MemorySize::UInt16, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 2, memory_size: MemorySize::Packed64_Int16, element_type: MemorySize::Int16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 4, memory_size: MemorySize::Packed64_UInt32, element_type: MemorySize::UInt32, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 4, memory_size: MemorySize::Packed64_Int32, element_type: MemorySize::Int32, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 2, memory_size: MemorySize::Packed64_Float16, element_type: MemorySize::Float16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 8, element_size: 4, memory_size: MemorySize::Packed64_Float32, element_type: MemorySize::Float32, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 1, memory_size: MemorySize::Packed128_UInt8, element_type: MemorySize::UInt8, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 1, memory_size: MemorySize::Packed128_Int8, element_type: MemorySize::Int8, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 2, memory_size: MemorySize::Packed128_UInt16, element_type: MemorySize::UInt16, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 2, memory_size: MemorySize::Packed128_Int16, element_type: MemorySize::Int16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 4, memory_size: MemorySize::Packed128_UInt32, element_type: MemorySize::UInt32, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 4, memory_size: MemorySize::Packed128_Int32, element_type: MemorySize::Int32, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 8, memory_size: MemorySize::Packed128_UInt52, element_type: MemorySize::UInt52, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 8, memory_size: MemorySize::Packed128_UInt64, element_type: MemorySize::UInt64, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 8, memory_size: MemorySize::Packed128_Int64, element_type: MemorySize::Int64, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 2, memory_size: MemorySize::Packed128_Float16, element_type: MemorySize::Float16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 4, memory_size: MemorySize::Packed128_Float32, element_type: MemorySize::Float32, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 8, memory_size: MemorySize::Packed128_Float64, element_type: MemorySize::Float64, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 16, element_size: 4, memory_size: MemorySize::Packed128_2xBFloat16, element_type: MemorySize::Packed32_BFloat16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 1, memory_size: MemorySize::Packed256_UInt8, element_type: MemorySize::UInt8, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 1, memory_size: MemorySize::Packed256_Int8, element_type: MemorySize::Int8, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 2, memory_size: MemorySize::Packed256_UInt16, element_type: MemorySize::UInt16, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 2, memory_size: MemorySize::Packed256_Int16, element_type: MemorySize::Int16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 4, memory_size: MemorySize::Packed256_UInt32, element_type: MemorySize::UInt32, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 4, memory_size: MemorySize::Packed256_Int32, element_type: MemorySize::Int32, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 8, memory_size: MemorySize::Packed256_UInt52, element_type: MemorySize::UInt52, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 8, memory_size: MemorySize::Packed256_UInt64, element_type: MemorySize::UInt64, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 8, memory_size: MemorySize::Packed256_Int64, element_type: MemorySize::Int64, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 16, memory_size: MemorySize::Packed256_UInt128, element_type: MemorySize::UInt128, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 16, memory_size: MemorySize::Packed256_Int128, element_type: MemorySize::Int128, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 2, memory_size: MemorySize::Packed256_Float16, element_type: MemorySize::Float16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 4, memory_size: MemorySize::Packed256_Float32, element_type: MemorySize::Float32, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 8, memory_size: MemorySize::Packed256_Float64, element_type: MemorySize::Float64, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 16, memory_size: MemorySize::Packed256_Float128, element_type: MemorySize::Float128, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 32, element_size: 4, memory_size: MemorySize::Packed256_2xBFloat16, element_type: MemorySize::Packed32_BFloat16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 1, memory_size: MemorySize::Packed512_UInt8, element_type: MemorySize::UInt8, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 1, memory_size: MemorySize::Packed512_Int8, element_type: MemorySize::Int8, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 2, memory_size: MemorySize::Packed512_UInt16, element_type: MemorySize::UInt16, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 2, memory_size: MemorySize::Packed512_Int16, element_type: MemorySize::Int16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 4, memory_size: MemorySize::Packed512_UInt32, element_type: MemorySize::UInt32, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 4, memory_size: MemorySize::Packed512_Int32, element_type: MemorySize::Int32, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 8, memory_size: MemorySize::Packed512_UInt52, element_type: MemorySize::UInt52, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 8, memory_size: MemorySize::Packed512_UInt64, element_type: MemorySize::UInt64, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 8, memory_size: MemorySize::Packed512_Int64, element_type: MemorySize::Int64, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 16, memory_size: MemorySize::Packed512_UInt128, element_type: MemorySize::UInt128, is_signed: false, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 4, memory_size: MemorySize::Packed512_Float32, element_type: MemorySize::Float32, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 8, memory_size: MemorySize::Packed512_Float64, element_type: MemorySize::Float64, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 64, element_size: 4, memory_size: MemorySize::Packed512_2xBFloat16, element_type: MemorySize::Packed32_BFloat16, is_signed: true, is_broadcast: false },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Broadcast64_UInt32, element_type: MemorySize::UInt32, is_signed: false, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Broadcast64_Int32, element_type: MemorySize::Int32, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Broadcast64_Float32, element_type: MemorySize::Float32, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Broadcast128_UInt32, element_type: MemorySize::UInt32, is_signed: false, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Broadcast128_Int32, element_type: MemorySize::Int32, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Broadcast128_UInt52, element_type: MemorySize::UInt52, is_signed: false, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Broadcast128_UInt64, element_type: MemorySize::UInt64, is_signed: false, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Broadcast128_Int64, element_type: MemorySize::Int64, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Broadcast128_Float32, element_type: MemorySize::Float32, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Broadcast128_Float64, element_type: MemorySize::Float64, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Broadcast256_UInt32, element_type: MemorySize::UInt32, is_signed: false, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Broadcast256_Int32, element_type: MemorySize::Int32, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Broadcast256_UInt52, element_type: MemorySize::UInt52, is_signed: false, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Broadcast256_UInt64, element_type: MemorySize::UInt64, is_signed: false, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Broadcast256_Int64, element_type: MemorySize::Int64, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Broadcast256_Float32, element_type: MemorySize::Float32, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Broadcast256_Float64, element_type: MemorySize::Float64, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Broadcast512_UInt32, element_type: MemorySize::UInt32, is_signed: false, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Broadcast512_Int32, element_type: MemorySize::Int32, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Broadcast512_UInt52, element_type: MemorySize::UInt52, is_signed: false, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Broadcast512_UInt64, element_type: MemorySize::UInt64, is_signed: false, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Broadcast512_Int64, element_type: MemorySize::Int64, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 4, memory_size: MemorySize::Broadcast512_Float32, element_type: MemorySize::Float32, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 8, memory_size: MemorySize::Broadcast512_Float64, element_type: MemorySize::Float64, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 2, memory_size: MemorySize::Broadcast128_2xInt16, element_type: MemorySize::Int16, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 2, memory_size: MemorySize::Broadcast256_2xInt16, element_type: MemorySize::Int16, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 2, memory_size: MemorySize::Broadcast512_2xInt16, element_type: MemorySize::Int16, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 4, memory_size: MemorySize::Broadcast128_2xUInt32, element_type: MemorySize::UInt32, is_signed: false, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 4, memory_size: MemorySize::Broadcast256_2xUInt32, element_type: MemorySize::UInt32, is_signed: false, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 4, memory_size: MemorySize::Broadcast512_2xUInt32, element_type: MemorySize::UInt32, is_signed: false, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 4, memory_size: MemorySize::Broadcast128_2xInt32, element_type: MemorySize::Int32, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 4, memory_size: MemorySize::Broadcast256_2xInt32, element_type: MemorySize::Int32, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 8, element_size: 4, memory_size: MemorySize::Broadcast512_2xInt32, element_type: MemorySize::Int32, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 2, memory_size: MemorySize::Broadcast128_2xBFloat16, element_type: MemorySize::BFloat16, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 2, memory_size: MemorySize::Broadcast256_2xBFloat16, element_type: MemorySize::BFloat16, is_signed: true, is_broadcast: true },
		MemorySizeInfo { size: 4, element_size: 2, memory_size: MemorySize::Broadcast512_2xBFloat16, element_type: MemorySize::BFloat16, is_signed: true, is_broadcast: true },
		// GENERATOR-END: MemorySizeInfoTable
	];

	/// [`MemorySize`] information
	///
	/// [`MemorySize`]: enum.MemorySize.html
	#[derive(Debug, Copy, Clone, Eq, PartialEq, Hash)]
	pub struct MemorySizeInfo {
		size: u16,
		element_size: u16,
		memory_size: MemorySize,
		element_type: MemorySize,
		// Use flags if more booleans are needed
		is_signed: bool,
		is_broadcast: bool,
	}

	#[cfg_attr(feature = "cargo-clippy", allow(clippy::trivially_copy_pass_by_ref))]
	impl MemorySizeInfo {
		/// Gets the [`MemorySize`] value
		///
		/// [`MemorySize`]: enum.MemorySize.html
		///
		/// # Examples
		///
		/// ```
		/// use iced_x86::*;
		/// let info = MemorySize::Packed256_UInt16.info();
		/// assert_eq!(MemorySize::Packed256_UInt16, info.memory_size());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn memory_size(&self) -> MemorySize {
			self.memory_size
		}

		/// Gets the size in bytes of the memory location or 0 if it's not accessed or unknown
		///
		/// # Examples
		///
		/// ```
		/// use iced_x86::*;
		/// let info = MemorySize::UInt32.info();
		/// assert_eq!(4, info.size());
		/// let info = MemorySize::Packed256_UInt16.info();
		/// assert_eq!(32, info.size());
		/// let info = MemorySize::Broadcast512_UInt64.info();
		/// assert_eq!(8, info.size());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn size(&self) -> usize {
			self.size as usize
		}

		/// Gets the size in bytes of the packed element. If it's not a packed data type, it's equal to [`size()`].
		///
		/// [`size()`]: #method.size
		///
		/// # Examples
		///
		/// ```
		/// use iced_x86::*;
		/// let info = MemorySize::UInt32.info();
		/// assert_eq!(4, info.element_size());
		/// let info = MemorySize::Packed256_UInt16.info();
		/// assert_eq!(2, info.element_size());
		/// let info = MemorySize::Broadcast512_UInt64.info();
		/// assert_eq!(8, info.element_size());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn element_size(&self) -> usize {
			self.element_size as usize
		}

		/// Gets the element type if it's packed data or the type itself if it's not packed data
		///
		/// # Examples
		///
		/// ```
		/// use iced_x86::*;
		/// let info = MemorySize::UInt32.info();
		/// assert_eq!(MemorySize::UInt32, info.element_type());
		/// let info = MemorySize::Packed256_UInt16.info();
		/// assert_eq!(MemorySize::UInt16, info.element_type());
		/// let info = MemorySize::Broadcast512_UInt64.info();
		/// assert_eq!(MemorySize::UInt64, info.element_type());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn element_type(&self) -> MemorySize {
			self.element_type
		}

		/// Gets the element type if it's packed data or the type itself if it's not packed data
		///
		/// # Examples
		///
		/// ```
		/// use iced_x86::*;
		/// let info = MemorySize::UInt32.info().element_type_info();
		/// assert_eq!(MemorySize::UInt32, info.memory_size());
		/// let info = MemorySize::Packed256_UInt16.info().element_type_info();
		/// assert_eq!(MemorySize::UInt16, info.memory_size());
		/// let info = MemorySize::Broadcast512_UInt64.info().element_type_info();
		/// assert_eq!(MemorySize::UInt64, info.memory_size());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn element_type_info(&self) -> &'static Self {
			self.element_type().info()
		}

		/// `true` if it's signed data (signed integer or a floating point value)
		///
		/// # Examples
		///
		/// ```
		/// use iced_x86::*;
		/// let info = MemorySize::UInt32.info();
		/// assert!(!info.is_signed());
		/// let info = MemorySize::Int32.info();
		/// assert!(info.is_signed());
		/// let info = MemorySize::Float64.info();
		/// assert!(info.is_signed());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn is_signed(&self) -> bool {
			self.is_signed
		}

		/// `true` if it's a broadcast memory type
		///
		/// # Examples
		///
		/// ```
		/// use iced_x86::*;
		/// let info = MemorySize::UInt32.info();
		/// assert!(!info.is_broadcast());
		/// let info = MemorySize::Packed256_UInt16.info();
		/// assert!(!info.is_broadcast());
		/// let info = MemorySize::Broadcast512_UInt64.info();
		/// assert!(info.is_broadcast());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn is_broadcast(&self) -> bool {
			self.is_broadcast
		}

		/// `true` if this is a packed data type, eg. [`MemorySize::Packed128_Float32`]. See also [`element_count()`]
		///
		/// [`MemorySize::Packed128_Float32`]: #variant.Packed128_Float32
		/// [`element_count()`]: #method.element_count
		///
		/// # Examples
		///
		/// ```
		/// use iced_x86::*;
		/// let info = MemorySize::UInt32.info();
		/// assert!(!info.is_packed());
		/// let info = MemorySize::Packed256_UInt16.info();
		/// assert!(info.is_packed());
		/// let info = MemorySize::Broadcast512_UInt64.info();
		/// assert!(!info.is_packed());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn is_packed(&self) -> bool {
			self.element_size < self.size
		}

		/// Gets the number of elements in the packed data type or `1` if it's not packed data ([`is_packed()`])
		///
		/// [`is_packed()`]: #method.is_packed
		///
		/// # Examples
		///
		/// ```
		/// use iced_x86::*;
		/// let info = MemorySize::UInt32.info();
		/// assert_eq!(1, info.element_count());
		/// let info = MemorySize::Packed256_UInt16.info();
		/// assert_eq!(16, info.element_count());
		/// let info = MemorySize::Broadcast512_UInt64.info();
		/// assert_eq!(1, info.element_count());
		/// ```
		#[cfg_attr(has_must_use, must_use)]
		#[inline]
		pub fn element_count(&self) -> usize {
			// element_size can be 0 so we don't divide by it if es == s
			if self.element_size == self.size {
				1
			} else {
				self.size as usize / self.element_size as usize
			}
		}
	}
}

// GENERATOR-BEGIN: MemorySize
// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
/// Size of a memory reference
#[derive(Copy, Clone, Eq, PartialEq, Ord, PartialOrd, Hash)]
#[cfg_attr(all(not(feature = "exhaustive_enums"), has_non_exhaustive), non_exhaustive)]
#[allow(non_camel_case_types)]
pub enum MemorySize {
	/// Unknown size or the instruction doesn't reference any memory (eg. `LEA`)
	Unknown = 0,
	/// Memory location contains a `u8`
	UInt8 = 1,
	/// Memory location contains a `u16`
	UInt16 = 2,
	/// Memory location contains a `u32`
	UInt32 = 3,
	/// Memory location contains a `u52`
	UInt52 = 4,
	/// Memory location contains a `u64`
	UInt64 = 5,
	/// Memory location contains a `u128`
	UInt128 = 6,
	/// Memory location contains a `u256`
	UInt256 = 7,
	/// Memory location contains a `u512`
	UInt512 = 8,
	/// Memory location contains a `i8`
	Int8 = 9,
	/// Memory location contains a `i16`
	Int16 = 10,
	/// Memory location contains a `i32`
	Int32 = 11,
	/// Memory location contains a `i64`
	Int64 = 12,
	/// Memory location contains a `i128`
	Int128 = 13,
	/// Memory location contains a `i256`
	Int256 = 14,
	/// Memory location contains a `i512`
	Int512 = 15,
	/// Memory location contains a seg:ptr pair, `u16` (offset) + `u16` (segment/selector)
	SegPtr16 = 16,
	/// Memory location contains a seg:ptr pair, `u32` (offset) + `u16` (segment/selector)
	SegPtr32 = 17,
	/// Memory location contains a seg:ptr pair, `u64` (offset) + `u16` (segment/selector)
	SegPtr64 = 18,
	/// Memory location contains a 16-bit offset (`JMP/CALL WORD PTR [mem]`)
	WordOffset = 19,
	/// Memory location contains a 32-bit offset (`JMP/CALL DWORD PTR [mem]`)
	DwordOffset = 20,
	/// Memory location contains a 64-bit offset (`JMP/CALL QWORD PTR [mem]`)
	QwordOffset = 21,
	/// Memory location contains two `u16`s (16-bit `BOUND`)
	Bound16_WordWord = 22,
	/// Memory location contains two `u32`s (32-bit `BOUND`)
	Bound32_DwordDword = 23,
	/// 32-bit `BNDMOV`, 2 x `u32`
	Bnd32 = 24,
	/// 64-bit `BNDMOV`, 2 x `u64`
	Bnd64 = 25,
	/// Memory location contains a 16-bit limit and a 32-bit address (eg. `LGDTW`, `LGDTD`)
	Fword6 = 26,
	/// Memory location contains a 16-bit limit and a 64-bit address (eg. `LGDTQ`)
	Fword10 = 27,
	/// Memory location contains a `f16`
	Float16 = 28,
	/// Memory location contains a `f32`
	Float32 = 29,
	/// Memory location contains a `f64`
	Float64 = 30,
	/// Memory location contains a `f80`
	Float80 = 31,
	/// Memory location contains a `f128`
	Float128 = 32,
	/// Memory location contains a `bfloat16`
	BFloat16 = 33,
	/// Memory location contains a 14-byte FPU environment (16-bit `FLDENV`/`FSTENV`)
	FpuEnv14 = 34,
	/// Memory location contains a 28-byte FPU environment (32/64-bit `FLDENV`/`FSTENV`)
	FpuEnv28 = 35,
	/// Memory location contains a 94-byte FPU environment (16-bit `FSAVE`/`FRSTOR`)
	FpuState94 = 36,
	/// Memory location contains a 108-byte FPU environment (32/64-bit `FSAVE`/`FRSTOR`)
	FpuState108 = 37,
	/// Memory location contains 512-bytes of `FXSAVE`/`FXRSTOR` data
	Fxsave_512Byte = 38,
	/// Memory location contains 512-bytes of `FXSAVE64`/`FXRSTOR64` data
	Fxsave64_512Byte = 39,
	/// 32-bit `XSAVE` area
	Xsave = 40,
	/// 64-bit `XSAVE` area
	Xsave64 = 41,
	/// Memory location contains a 10-byte `bcd` value (`FBLD`/`FBSTP`)
	Bcd = 42,
	/// 64-bit location: TILECFG (`LDTILECFG`/`STTILECFG`)
	Tilecfg = 43,
	/// Tile data
	Tile = 44,
	/// 80-bit segment descriptor and selector: 0-7 = descriptor, 8-9 = selector
	SegmentDescSelector = 45,
	/// 16 bit location: 2 x `u8`
	Packed16_UInt8 = 46,
	/// 16 bit location: 2 x `i8`
	Packed16_Int8 = 47,
	/// 32 bit location: 4 x `u8`
	Packed32_UInt8 = 48,
	/// 32 bit location: 4 x `i8`
	Packed32_Int8 = 49,
	/// 32 bit location: 2 x `u16`
	Packed32_UInt16 = 50,
	/// 32 bit location: 2 x `i16`
	Packed32_Int16 = 51,
	/// 32 bit location: 2 x `bfloat16`
	Packed32_BFloat16 = 52,
	/// 64-bit location: 8 x `u8`
	Packed64_UInt8 = 53,
	/// 64-bit location: 8 x `i8`
	Packed64_Int8 = 54,
	/// 64-bit location: 4 x `u16`
	Packed64_UInt16 = 55,
	/// 64-bit location: 4 x `i16`
	Packed64_Int16 = 56,
	/// 64-bit location: 2 x `u32`
	Packed64_UInt32 = 57,
	/// 64-bit location: 2 x `i32`
	Packed64_Int32 = 58,
	/// 64-bit location: 4 x `f16`
	Packed64_Float16 = 59,
	/// 64-bit location: 2 x `f32`
	Packed64_Float32 = 60,
	/// 128 bit location: 16 x `u8`
	Packed128_UInt8 = 61,
	/// 128 bit location: 16 x `i8`
	Packed128_Int8 = 62,
	/// 128 bit location: 8 x `u16`
	Packed128_UInt16 = 63,
	/// 128 bit location: 8 x `i16`
	Packed128_Int16 = 64,
	/// 128 bit location: 4 x `u32`
	Packed128_UInt32 = 65,
	/// 128 bit location: 4 x `i32`
	Packed128_Int32 = 66,
	/// 128 bit location: 2 x `u52`
	Packed128_UInt52 = 67,
	/// 128 bit location: 2 x `u64`
	Packed128_UInt64 = 68,
	/// 128 bit location: 2 x `i64`
	Packed128_Int64 = 69,
	/// 128 bit location: 8 x `f16`
	Packed128_Float16 = 70,
	/// 128 bit location: 4 x `f32`
	Packed128_Float32 = 71,
	/// 128 bit location: 2 x `f64`
	Packed128_Float64 = 72,
	/// 128 bit location: 4 x (2 x `bfloat16`)
	Packed128_2xBFloat16 = 73,
	/// 256 bit location: 32 x `u8`
	Packed256_UInt8 = 74,
	/// 256 bit location: 32 x `i8`
	Packed256_Int8 = 75,
	/// 256 bit location: 16 x `u16`
	Packed256_UInt16 = 76,
	/// 256 bit location: 16 x `i16`
	Packed256_Int16 = 77,
	/// 256 bit location: 8 x `u32`
	Packed256_UInt32 = 78,
	/// 256 bit location: 8 x `i32`
	Packed256_Int32 = 79,
	/// 256 bit location: 4 x `u52`
	Packed256_UInt52 = 80,
	/// 256 bit location: 4 x `u64`
	Packed256_UInt64 = 81,
	/// 256 bit location: 4 x `i64`
	Packed256_Int64 = 82,
	/// 256 bit location: 2 x `u128`
	Packed256_UInt128 = 83,
	/// 256 bit location: 2 x `i128`
	Packed256_Int128 = 84,
	/// 256 bit location: 16 x `f16`
	Packed256_Float16 = 85,
	/// 256 bit location: 8 x `f32`
	Packed256_Float32 = 86,
	/// 256 bit location: 4 x `f64`
	Packed256_Float64 = 87,
	/// 256 bit location: 2 x `f128`
	Packed256_Float128 = 88,
	/// 256 bit location: 8 x (2 x `bfloat16`)
	Packed256_2xBFloat16 = 89,
	/// 512 bit location: 64 x `u8`
	Packed512_UInt8 = 90,
	/// 512 bit location: 64 x `i8`
	Packed512_Int8 = 91,
	/// 512 bit location: 32 x `u16`
	Packed512_UInt16 = 92,
	/// 512 bit location: 32 x `i16`
	Packed512_Int16 = 93,
	/// 512 bit location: 16 x `u32`
	Packed512_UInt32 = 94,
	/// 512 bit location: 16 x `i32`
	Packed512_Int32 = 95,
	/// 512 bit location: 8 x `u52`
	Packed512_UInt52 = 96,
	/// 512 bit location: 8 x `u64`
	Packed512_UInt64 = 97,
	/// 512 bit location: 8 x `i64`
	Packed512_Int64 = 98,
	/// 256 bit location: 4 x `u128`
	Packed512_UInt128 = 99,
	/// 512 bit location: 16 x `f32`
	Packed512_Float32 = 100,
	/// 512 bit location: 8 x `f64`
	Packed512_Float64 = 101,
	/// 512 bit location: 16 x (2 x `bfloat16`)
	Packed512_2xBFloat16 = 102,
	/// Broadcast `u32` to 64 bits
	Broadcast64_UInt32 = 103,
	/// Broadcast `i32` to 64 bits
	Broadcast64_Int32 = 104,
	/// Broadcast `f32` to 64 bits
	Broadcast64_Float32 = 105,
	/// Broadcast `u32` to 128 bits
	Broadcast128_UInt32 = 106,
	/// Broadcast `i32` to 128 bits
	Broadcast128_Int32 = 107,
	/// Broadcast `u52` to 128 bits
	Broadcast128_UInt52 = 108,
	/// Broadcast `u64` to 128 bits
	Broadcast128_UInt64 = 109,
	/// Broadcast `i64` to 128 bits
	Broadcast128_Int64 = 110,
	/// Broadcast `f32` to 128 bits
	Broadcast128_Float32 = 111,
	/// Broadcast `f64` to 128 bits
	Broadcast128_Float64 = 112,
	/// Broadcast `u32` to 256 bits
	Broadcast256_UInt32 = 113,
	/// Broadcast `i32` to 256 bits
	Broadcast256_Int32 = 114,
	/// Broadcast `u52` to 256 bits
	Broadcast256_UInt52 = 115,
	/// Broadcast `u64` to 256 bits
	Broadcast256_UInt64 = 116,
	/// Broadcast `i64` to 256 bits
	Broadcast256_Int64 = 117,
	/// Broadcast `f32` to 256 bits
	Broadcast256_Float32 = 118,
	/// Broadcast `f64` to 256 bits
	Broadcast256_Float64 = 119,
	/// Broadcast `u32` to 512 bits
	Broadcast512_UInt32 = 120,
	/// Broadcast `i32` to 512 bits
	Broadcast512_Int32 = 121,
	/// Broadcast `u52` to 512 bits
	Broadcast512_UInt52 = 122,
	/// Broadcast `u64` to 512 bits
	Broadcast512_UInt64 = 123,
	/// Broadcast `i64` to 512 bits
	Broadcast512_Int64 = 124,
	/// Broadcast `f32` to 512 bits
	Broadcast512_Float32 = 125,
	/// Broadcast `f64` to 512 bits
	Broadcast512_Float64 = 126,
	/// Broadcast 2 x `i16` to 128 bits
	Broadcast128_2xInt16 = 127,
	/// Broadcast 2 x `i16` to 256 bits
	Broadcast256_2xInt16 = 128,
	/// Broadcast 2 x `i16` to 512 bits
	Broadcast512_2xInt16 = 129,
	/// Broadcast 2 x `u32` to 128 bits
	Broadcast128_2xUInt32 = 130,
	/// Broadcast 2 x `u32` to 256 bits
	Broadcast256_2xUInt32 = 131,
	/// Broadcast 2 x `u32` to 512 bits
	Broadcast512_2xUInt32 = 132,
	/// Broadcast 2 x `i32` to 128 bits
	Broadcast128_2xInt32 = 133,
	/// Broadcast 2 x `i32` to 256 bits
	Broadcast256_2xInt32 = 134,
	/// Broadcast 2 x `i32` to 512 bits
	Broadcast512_2xInt32 = 135,
	/// Broadcast 2 x `bfloat16` to 128 bits
	Broadcast128_2xBFloat16 = 136,
	/// Broadcast 2 x `bfloat16` to 256 bits
	Broadcast256_2xBFloat16 = 137,
	/// Broadcast 2 x `bfloat16` to 512 bits
	Broadcast512_2xBFloat16 = 138,
}
#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static GEN_DEBUG_MEMORY_SIZE: [&str; 139] = [
	"Unknown",
	"UInt8",
	"UInt16",
	"UInt32",
	"UInt52",
	"UInt64",
	"UInt128",
	"UInt256",
	"UInt512",
	"Int8",
	"Int16",
	"Int32",
	"Int64",
	"Int128",
	"Int256",
	"Int512",
	"SegPtr16",
	"SegPtr32",
	"SegPtr64",
	"WordOffset",
	"DwordOffset",
	"QwordOffset",
	"Bound16_WordWord",
	"Bound32_DwordDword",
	"Bnd32",
	"Bnd64",
	"Fword6",
	"Fword10",
	"Float16",
	"Float32",
	"Float64",
	"Float80",
	"Float128",
	"BFloat16",
	"FpuEnv14",
	"FpuEnv28",
	"FpuState94",
	"FpuState108",
	"Fxsave_512Byte",
	"Fxsave64_512Byte",
	"Xsave",
	"Xsave64",
	"Bcd",
	"Tilecfg",
	"Tile",
	"SegmentDescSelector",
	"Packed16_UInt8",
	"Packed16_Int8",
	"Packed32_UInt8",
	"Packed32_Int8",
	"Packed32_UInt16",
	"Packed32_Int16",
	"Packed32_BFloat16",
	"Packed64_UInt8",
	"Packed64_Int8",
	"Packed64_UInt16",
	"Packed64_Int16",
	"Packed64_UInt32",
	"Packed64_Int32",
	"Packed64_Float16",
	"Packed64_Float32",
	"Packed128_UInt8",
	"Packed128_Int8",
	"Packed128_UInt16",
	"Packed128_Int16",
	"Packed128_UInt32",
	"Packed128_Int32",
	"Packed128_UInt52",
	"Packed128_UInt64",
	"Packed128_Int64",
	"Packed128_Float16",
	"Packed128_Float32",
	"Packed128_Float64",
	"Packed128_2xBFloat16",
	"Packed256_UInt8",
	"Packed256_Int8",
	"Packed256_UInt16",
	"Packed256_Int16",
	"Packed256_UInt32",
	"Packed256_Int32",
	"Packed256_UInt52",
	"Packed256_UInt64",
	"Packed256_Int64",
	"Packed256_UInt128",
	"Packed256_Int128",
	"Packed256_Float16",
	"Packed256_Float32",
	"Packed256_Float64",
	"Packed256_Float128",
	"Packed256_2xBFloat16",
	"Packed512_UInt8",
	"Packed512_Int8",
	"Packed512_UInt16",
	"Packed512_Int16",
	"Packed512_UInt32",
	"Packed512_Int32",
	"Packed512_UInt52",
	"Packed512_UInt64",
	"Packed512_Int64",
	"Packed512_UInt128",
	"Packed512_Float32",
	"Packed512_Float64",
	"Packed512_2xBFloat16",
	"Broadcast64_UInt32",
	"Broadcast64_Int32",
	"Broadcast64_Float32",
	"Broadcast128_UInt32",
	"Broadcast128_Int32",
	"Broadcast128_UInt52",
	"Broadcast128_UInt64",
	"Broadcast128_Int64",
	"Broadcast128_Float32",
	"Broadcast128_Float64",
	"Broadcast256_UInt32",
	"Broadcast256_Int32",
	"Broadcast256_UInt52",
	"Broadcast256_UInt64",
	"Broadcast256_Int64",
	"Broadcast256_Float32",
	"Broadcast256_Float64",
	"Broadcast512_UInt32",
	"Broadcast512_Int32",
	"Broadcast512_UInt52",
	"Broadcast512_UInt64",
	"Broadcast512_Int64",
	"Broadcast512_Float32",
	"Broadcast512_Float64",
	"Broadcast128_2xInt16",
	"Broadcast256_2xInt16",
	"Broadcast512_2xInt16",
	"Broadcast128_2xUInt32",
	"Broadcast256_2xUInt32",
	"Broadcast512_2xUInt32",
	"Broadcast128_2xInt32",
	"Broadcast256_2xInt32",
	"Broadcast512_2xInt32",
	"Broadcast128_2xBFloat16",
	"Broadcast256_2xBFloat16",
	"Broadcast512_2xBFloat16",
];
impl fmt::Debug for MemorySize {
	#[inline]
	fn fmt<'a>(&self, f: &mut fmt::Formatter<'a>) -> fmt::Result {
		write!(f, "{}", GEN_DEBUG_MEMORY_SIZE[*self as usize])?;
		Ok(())
	}
}
impl Default for MemorySize {
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	fn default() -> Self {
		MemorySize::Unknown
	}
}
// GENERATOR-END: MemorySize

#[cfg(any(feature = "instr_info", feature = "encoder"))]
impl MemorySize {
	/// Gets the memory size info
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// let info = MemorySize::Packed256_UInt16.info();
	/// assert_eq!(32, info.size());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn info(self) -> &'static MemorySizeInfo {
		&MEMORY_SIZE_INFOS[self as usize]
	}

	/// Gets the size in bytes of the memory location or 0 if it's not accessed by the instruction or unknown or variable sized
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert_eq!(4, MemorySize::UInt32.size());
	/// assert_eq!(32, MemorySize::Packed256_UInt16.size());
	/// assert_eq!(8, MemorySize::Broadcast512_UInt64.size());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn size(self) -> usize {
		self.info().size()
	}

	/// Gets the size in bytes of the packed element. If it's not a packed data type, it's equal to [`size()`].
	///
	/// [`size()`]: #method.size
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert_eq!(4, MemorySize::UInt32.element_size());
	/// assert_eq!(2, MemorySize::Packed256_UInt16.element_size());
	/// assert_eq!(8, MemorySize::Broadcast512_UInt64.element_size());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn element_size(self) -> usize {
		self.info().element_size()
	}

	/// Gets the element type if it's packed data or `self` if it's not packed data
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert_eq!(MemorySize::UInt32, MemorySize::UInt32.element_type());
	/// assert_eq!(MemorySize::UInt16, MemorySize::Packed256_UInt16.element_type());
	/// assert_eq!(MemorySize::UInt64, MemorySize::Broadcast512_UInt64.element_type());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn element_type(self) -> Self {
		self.info().element_type()
	}

	/// Gets the element type info if it's packed data or `self` if it's not packed data
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert_eq!(MemorySize::UInt32, MemorySize::UInt32.element_type_info().memory_size());
	/// assert_eq!(MemorySize::UInt16, MemorySize::Packed256_UInt16.element_type_info().memory_size());
	/// assert_eq!(MemorySize::UInt64, MemorySize::Broadcast512_UInt64.element_type_info().memory_size());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn element_type_info(self) -> &'static MemorySizeInfo {
		self.info().element_type().info()
	}

	/// `true` if it's signed data (signed integer or a floating point value)
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert!(!MemorySize::UInt32.is_signed());
	/// assert!(MemorySize::Int32.is_signed());
	/// assert!(MemorySize::Float64.is_signed());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn is_signed(self) -> bool {
		self.info().is_signed()
	}

	/// `true` if this is a packed data type, eg. [`MemorySize::Packed128_Float32`]
	///
	/// [`MemorySize::Packed128_Float32`]: #variant.Packed128_Float32
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert!(!MemorySize::UInt32.is_packed());
	/// assert!(MemorySize::Packed256_UInt16.is_packed());
	/// assert!(!MemorySize::Broadcast512_UInt64.is_packed());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn is_packed(self) -> bool {
		self.info().is_packed()
	}

	/// Gets the number of elements in the packed data type or `1` if it's not packed data ([`is_packed()`])
	///
	/// [`is_packed()`]: #method.is_packed
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert_eq!(1, MemorySize::UInt32.element_count());
	/// assert_eq!(16, MemorySize::Packed256_UInt16.element_count());
	/// assert_eq!(1, MemorySize::Broadcast512_UInt64.element_count());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn element_count(self) -> usize {
		self.info().element_count()
	}
}

#[cfg(any(feature = "instr_info", feature = "encoder", feature = "fast_fmt"))]
impl MemorySize {
	/// Checks if it is a broadcast memory type
	///
	/// # Examples
	///
	/// ```
	/// use iced_x86::*;
	/// assert!(!MemorySize::Packed64_Float16.is_broadcast());
	/// assert!(MemorySize::Broadcast512_UInt64.is_broadcast());
	/// ```
	#[cfg_attr(has_must_use, must_use)]
	#[inline]
	pub fn is_broadcast(self) -> bool {
		use super::iced_constants::IcedConstants;
		self >= IcedConstants::FIRST_BROADCAST_MEMORY_SIZE
	}
}
