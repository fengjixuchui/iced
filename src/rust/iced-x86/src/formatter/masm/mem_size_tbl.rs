/*
Copyright (C) 2018-2019 de4dot@gmail.com

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

use super::super::super::iced_constants::IcedConstants;
use super::super::fmt_consts::*;
use super::FormatterString;
#[cfg(not(feature = "std"))]
use alloc::vec::Vec;
use core::mem;

pub(super) struct Info {
	pub(super) keywords: &'static [&'static FormatterString],
	pub(super) size: u32,
	pub(super) is_broadcast: bool,
}

enum Size {
	S0,
	S1,
	S2,
	S4,
	S6,
	S8,
	S10,
	S14,
	S16,
	S28,
	S32,
	S64,
	S94,
	S108,
	S512,
}

#[allow(non_camel_case_types)]
enum MemoryKeywords {
	None,
	byte_ptr,
	dword_bcst,
	dword_ptr,
	fpuenv14_ptr,
	fpuenv28_ptr,
	fpustate108_ptr,
	fpustate94_ptr,
	fword_ptr,
	oword_ptr,
	qword_bcst,
	qword_ptr,
	tbyte_ptr,
	word_ptr,
	xmmword_ptr,
	ymmword_ptr,
	zmmword_ptr,
}

const SIZE_KIND_SHIFT: u32 = 5;
const MEMORY_KEYWORDS_MASK: u8 = 0x1F;

// GENERATOR-BEGIN: MemorySizes
// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static MEM_SIZE_TBL_DATA: [u16; 139] = [
	((MemoryKeywords::None as u16) | ((Size::S0 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::byte_ptr as u16) | ((Size::S1 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::word_ptr as u16) | ((Size::S2 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_ptr as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::byte_ptr as u16) | ((Size::S1 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::word_ptr as u16) | ((Size::S2 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_ptr as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_ptr as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::fword_ptr as u16) | ((Size::S6 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::tbyte_ptr as u16) | ((Size::S10 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::word_ptr as u16) | ((Size::S2 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_ptr as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_ptr as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::oword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::fword_ptr as u16) | ((Size::S6 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::fword_ptr as u16) | ((Size::S10 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::word_ptr as u16) | ((Size::S2 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_ptr as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::tbyte_ptr as u16) | ((Size::S10 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::word_ptr as u16) | ((Size::S2 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::fpuenv14_ptr as u16) | ((Size::S14 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::fpuenv28_ptr as u16) | ((Size::S28 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::fpustate94_ptr as u16) | ((Size::S94 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::fpustate108_ptr as u16) | ((Size::S108 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::None as u16) | ((Size::S512 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::None as u16) | ((Size::S512 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::None as u16) | ((Size::S0 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::None as u16) | ((Size::S0 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::tbyte_ptr as u16) | ((Size::S10 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::None as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::None as u16) | ((Size::S0 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::tbyte_ptr as u16) | ((Size::S10 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::word_ptr as u16) | ((Size::S2 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::word_ptr as u16) | ((Size::S2 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_ptr as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_ptr as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_ptr as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_ptr as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_ptr as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_ptr as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::xmmword_ptr as u16) | ((Size::S16 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::ymmword_ptr as u16) | ((Size::S32 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::zmmword_ptr as u16) | ((Size::S64 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::qword_bcst as u16) | ((Size::S8 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
	((MemoryKeywords::dword_bcst as u16) | ((Size::S4 as u16) << SIZE_KIND_SHIFT)),
];
// GENERATOR-END: MemorySizes

#[cfg_attr(feature = "cargo-fmt", rustfmt::skip)]
static SIZES: [u16; 15] = [
	0,
	1,
	2,
	4,
	6,
	8,
	10,
	14,
	16,
	28,
	32,
	64,
	94,
	108,
	512,
];

lazy_static! {
	pub(super) static ref MEM_SIZE_TBL: Vec<Info> = {
		let mut v = Vec::with_capacity(IcedConstants::NUMBER_OF_MEMORY_SIZES);
		let ac = &*ARRAY_CONSTS;
		for (i, &d) in MEM_SIZE_TBL_DATA.iter().enumerate() {
			let mem_keywords: MemoryKeywords = unsafe { mem::transmute((d as u8) & MEMORY_KEYWORDS_MASK) };
			let keywords: &'static [&'static FormatterString] = match mem_keywords {
				MemoryKeywords::None => &ac.nothing,
				MemoryKeywords::byte_ptr => &ac.byte_ptr,
				MemoryKeywords::dword_bcst => &ac.dword_bcst,
				MemoryKeywords::dword_ptr => &ac.dword_ptr,
				MemoryKeywords::fpuenv14_ptr => &ac.fpuenv14_ptr,
				MemoryKeywords::fpuenv28_ptr => &ac.fpuenv28_ptr,
				MemoryKeywords::fpustate108_ptr => &ac.fpustate108_ptr,
				MemoryKeywords::fpustate94_ptr => &ac.fpustate94_ptr,
				MemoryKeywords::fword_ptr => &ac.fword_ptr,
				MemoryKeywords::oword_ptr => &ac.oword_ptr,
				MemoryKeywords::qword_bcst => &ac.qword_bcst,
				MemoryKeywords::qword_ptr => &ac.qword_ptr,
				MemoryKeywords::tbyte_ptr => &ac.tbyte_ptr,
				MemoryKeywords::word_ptr => &ac.word_ptr,
				MemoryKeywords::xmmword_ptr => &ac.xmmword_ptr,
				MemoryKeywords::ymmword_ptr => &ac.ymmword_ptr,
				MemoryKeywords::zmmword_ptr => &ac.zmmword_ptr,
			};
			let size = SIZES[d as usize >> SIZE_KIND_SHIFT] as u32;
			v.push(Info { keywords, size, is_broadcast: i >= IcedConstants::FIRST_BROADCAST_MEMORY_SIZE as usize });
		}
		v
	};
}
