<Project Sdk="Microsoft.NET.Sdk">

  <PropertyGroup>
    <TargetFrameworks>netstandard2.0;net45</TargetFrameworks>
    <!-- It's not possible to target .NET Framework 3.5 when using dotnet build
         https://github.com/Microsoft/msbuild/issues/1333 -->
    <NoTargetFrameworkNet35 Condition=" '$(NoTargetFrameworkNet35)' == '' AND '$(MSBuildRuntimeType)' == 'Core' ">true</NoTargetFrameworkNet35>
    <TargetFrameworks Condition=" '$(NoTargetFrameworkNet35)' != 'true' ">$(TargetFrameworks);net35</TargetFrameworks>

    <Description>x86/x64 instruction decoder, encoder, disassembler</Description>
    <Title>$(Description)</Title>
    <AssemblyTitle>Iced</AssemblyTitle>
    <AssemblyName>Iced</AssemblyName>
    <PackageId>Iced</PackageId>
    <PackageIcon>logo.png</PackageIcon>
    <PackageProjectUrl>https://github.com/0xd4d/iced</PackageProjectUrl>
    <PackageLicenseExpression>MIT</PackageLicenseExpression>
    <PackageVersion>$(InformationalVersion)</PackageVersion>
    <PackageTags>x86;x64;encoder;decoder;formatter;disassembler</PackageTags>
    <GenerateDocumentationFile>true</GenerateDocumentationFile>
    <PublishRepositoryUrl>true</PublishRepositoryUrl>
    <IncludeSymbols>true</IncludeSymbols>
    <SymbolPackageFormat>snupkg</SymbolPackageFormat>
    <Nullable>enable</Nullable>

    <!-- From the README -->
    <PackageDescription>
High performance x86 (16/32/64-bit) instruction decoder, encoder and disassembler.
It can be used for static analysis of x86/x64 binaries, to rewrite code (eg. remove garbage instructions), to relocate code or as a disassembler.

- Supports all Intel and AMD instructions
- The decoder doesn't allocate any memory and is 2x-5x+ faster than other similar libraries written in C or C#
- Small decoded instructions, only 32 bytes
- The formatter supports masm, nasm, gas (AT&amp;T), Intel (XED) and there are many options to customize the output
- The encoder can be used to re-encode decoded instructions at any address
- The block encoder encodes a list of instructions and optimizes branches to short, near or 'long' (64-bit: 1 or more instructions)
- API to get instruction info, eg. read/written registers, memory and rflags bits; CPUID feature flag, flow control info, etc
- All instructions are tested (decode, encode, format, instruction info)

License: MIT
    </PackageDescription>
    <PackageReleaseNotes></PackageReleaseNotes>
  </PropertyGroup>

  <ItemGroup>
    <None Include="..\LICENSE.txt" Pack="true" PackagePath="" />
    <None Include="..\logo.png" Pack="true" PackagePath="" />
  </ItemGroup>

  <ItemGroup>
    <PackageReference Include="Microsoft.NETFramework.ReferenceAssemblies" Version="1.0.0-preview.2" PrivateAssets="All" />
    <PackageReference Include="Microsoft.SourceLink.GitHub" Version="1.0.0-beta2-19367-01" PrivateAssets="All" />
  </ItemGroup>

  <PropertyGroup>
    <DefineConstants Condition=" $(TargetFramework.StartsWith(netstandard)) AND '$(TargetFramework)' != 'netstandard2.0' ">$(DefineConstants);HAS_SPAN</DefineConstants>
  </PropertyGroup>

</Project>
