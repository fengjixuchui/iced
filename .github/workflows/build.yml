name: GitHub CI
on:
  push:
    paths:
      - ".github/workflows/build.yml"
      - "src/**"
      - "!**/*.md"
    branches:
      - master
  pull_request:
    paths:
      - "src/**"
      - "!**/*.md"
    branches:
      - master
  release:
    types: [released]

env:
  CI_REQ_DOTNET_SDK_VER: 3.1.100
  CI_NODE_MIN_VER: 10.0.0
  RUSTFLAGS: -D warnings

jobs:
  build-csharp-windows:
    name: C# (${{matrix.os}})
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{env.CI_REQ_DOTNET_SDK_VER}}

      - name: Build, test
        shell: bash
        run: ./build/build-dotnet

      - name: upload-artifact doesn't support wildcards
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          mkdir nuget_files
          cp src/csharp/Intel/Iced/bin/Release/*.*nupkg nuget_files/

      - uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/master' || startsWith(github.ref, 'refs/tags/')
        with:
          name: nupkg
          path: nuget_files
          if-no-files-found: error

      - uses: actions/upload-artifact@v2
        if: github.ref == 'refs/heads/master'
        with:
          name: coverage.info
          path: src/csharp/Intel/Iced.UnitTests/coverage.netcoreapp3.1.info
          if-no-files-found: error

      - name: Upload coverage report
        if: github.ref == 'refs/heads/master'
        shell: bash
        continue-on-error: true
        run: |
          curl https://codecov.io/bash -o codecov
          chmod +x codecov
          ./codecov -f src/csharp/Intel/Iced.UnitTests/coverage.netcoreapp3.1.info
        env:
          CODECOV_TOKEN: ${{secrets.CODECOV_TOKEN}}

      - name: Upload to nuget.org if it's a new release
        if: startsWith(github.ref, 'refs/tags/')
        shell: bash
        run: |
          curl https://dist.nuget.org/win-x86-commandline/latest/nuget.exe -o nuget.exe
          for file in src/csharp/Intel/Iced/bin/Release/Iced.*.nupkg; do
            ./nuget.exe push "$file" -ApiKey "${{secrets.NUGET_APIKEY}}" -NonInteractive -Source https://api.nuget.org/v3/index.json
          done

  # Make sure it builds on Linux/macOS too
  build-csharp:
    name: C# (${{matrix.os}})
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{env.CI_REQ_DOTNET_SDK_VER}}

      - name: Build, test
        shell: bash
        run: ./build/build-dotnet --quick-check

  build-rust:
    name: Rust (${{matrix.os}})
    runs-on: ${{matrix.os}}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]

    steps:
      - uses: actions/checkout@v2

      - name: Update PATH env
        shell: bash
        run: |
          echo "$HOME/.cargo/bin" >> "$GITHUB_PATH"

      - name: Install rustup and rustc latest (macOS)
        shell: bash
        if: startsWith(matrix.os, 'macos-')
        run: |
          curl https://sh.rustup.rs -sSf | bash -s -- -y
          rustup install stable
          rustup component add rustfmt
          rustup component add clippy

      - name: Install rustc
        shell: bash
        run: |
          # It fails on Windows so disable auto self update
          rustup toolchain install 1.20.0 --no-self-update
          rustup target add wasm32-unknown-unknown
          rustup update --no-self-update

      - name: Install Node.js
        uses: actions/setup-node@v1
        with:
          node-version: ${{env.CI_NODE_MIN_VER}}

      - name: Install wasm-pack
        shell: bash
        run: npm install -g wasm-pack

      - uses: actions/setup-dotnet@v1
        with:
          dotnet-version: ${{env.CI_REQ_DOTNET_SDK_VER}}

      - name: Build and test (Rust)
        shell: bash
        run: |
          ./build/build-rust --no-set-rustflags
          git clean -xdf

      - name: Build and test (JS)
        shell: bash
        run: |
          ./build/build-js --no-set-rustflags
          git clean -xdf
