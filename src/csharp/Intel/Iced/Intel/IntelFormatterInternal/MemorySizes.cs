/*
Copyright (C) 2018-2019 de4dot@gmail.com

Permission is hereby granted, free of charge, to any person obtaining
a copy of this software and associated documentation files (the
"Software"), to deal in the Software without restriction, including
without limitation the rights to use, copy, modify, merge, publish,
distribute, sublicense, and/or sell copies of the Software, and to
permit persons to whom the Software is furnished to do so, subject to
the following conditions:

The above copyright notice and this permission notice shall be
included in all copies or substantial portions of the Software.

THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND,
EXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.
IN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY
CLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,
TORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE
SOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.
*/

#if INTEL
using System;
using Iced.Intel.FormatterInternal;

namespace Iced.Intel.IntelFormatterInternal {
	static class MemorySizes {
		public readonly struct Info {
			public readonly FormatterString[] keywords;
			public readonly FormatterString bcstTo;
			public Info(FormatterString[] keywords, FormatterString bcstTo) {
				this.keywords = keywords;
				this.bcstTo = bcstTo;
			}
		}
		public static readonly Info[] AllMemorySizes = GetMemorySizes();

		static Info[] GetMemorySizes() {
			// GENERATOR-BEGIN: ConstData
			// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
			const int BroadcastToKindShift = 5;
			const int MemoryKeywordsMask = 31;
			var @byte = new FormatterString("byte");
			var ptr = new FormatterString("ptr");
			var byte_ptr = new[] { @byte, ptr };
			var dword = new FormatterString("dword");
			var dword_ptr = new[] { dword, ptr };
			var fpuenv14 = new FormatterString("fpuenv14");
			var fpuenv14_ptr = new[] { fpuenv14, ptr };
			var fpuenv28 = new FormatterString("fpuenv28");
			var fpuenv28_ptr = new[] { fpuenv28, ptr };
			var fpustate108 = new FormatterString("fpustate108");
			var fpustate108_ptr = new[] { fpustate108, ptr };
			var fpustate94 = new FormatterString("fpustate94");
			var fpustate94_ptr = new[] { fpustate94, ptr };
			var fword = new FormatterString("fword");
			var fword_ptr = new[] { fword, ptr };
			var qword = new FormatterString("qword");
			var qword_ptr = new[] { qword, ptr };
			var tbyte = new FormatterString("tbyte");
			var tbyte_ptr = new[] { tbyte, ptr };
			var word = new FormatterString("word");
			var word_ptr = new[] { word, ptr };
			var xmmword = new FormatterString("xmmword");
			var xmmword_ptr = new[] { xmmword, ptr };
			var ymmword = new FormatterString("ymmword");
			var ymmword_ptr = new[] { ymmword, ptr };
			var zmmword = new FormatterString("zmmword");
			var zmmword_ptr = new[] { zmmword, ptr };
			var mem384 = new FormatterString("mem384");
			var mem384_ptr = new[] { mem384, ptr };
			var empty = new FormatterString("");
			var b1to2 = new FormatterString("1to2");
			var b1to4 = new FormatterString("1to4");
			var b1to8 = new FormatterString("1to8");
			var b1to16 = new FormatterString("1to16");
			// GENERATOR-END: ConstData

			var infos = new Info[IcedConstants.NumberOfMemorySizes];
#if HAS_SPAN
			ReadOnlySpan<byte>
#else
			byte[]
#endif
			data = new byte[IcedConstants.NumberOfMemorySizes] {
				// GENERATOR-BEGIN: MemorySizes
				// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
				0x00,
				0x01,
				0x0A,
				0x02,
				0x08,
				0x08,
				0x0B,
				0x0C,
				0x0D,
				0x01,
				0x0A,
				0x02,
				0x08,
				0x0B,
				0x0C,
				0x0D,
				0x02,
				0x07,
				0x09,
				0x0A,
				0x02,
				0x08,
				0x02,
				0x08,
				0x08,
				0x0B,
				0x07,
				0x07,
				0x0A,
				0x02,
				0x08,
				0x09,
				0x0B,
				0x0A,
				0x03,
				0x04,
				0x06,
				0x05,
				0x00,
				0x00,
				0x00,
				0x00,
				0x09,
				0x0D,
				0x00,
				0x09,
				0x0E,
				0x0D,
				0x0A,
				0x0A,
				0x02,
				0x02,
				0x02,
				0x02,
				0x02,
				0x08,
				0x08,
				0x08,
				0x08,
				0x08,
				0x08,
				0x08,
				0x08,
				0x0B,
				0x0B,
				0x0B,
				0x0B,
				0x0B,
				0x0B,
				0x0B,
				0x0B,
				0x0B,
				0x0B,
				0x0B,
				0x0B,
				0x0B,
				0x0C,
				0x0C,
				0x0C,
				0x0C,
				0x0C,
				0x0C,
				0x0C,
				0x0C,
				0x0C,
				0x0C,
				0x0C,
				0x0C,
				0x0C,
				0x0C,
				0x0C,
				0x0C,
				0x0D,
				0x0D,
				0x0D,
				0x0D,
				0x0D,
				0x0D,
				0x0D,
				0x0D,
				0x0D,
				0x0D,
				0x0D,
				0x0D,
				0x0D,
				0x22,
				0x22,
				0x22,
				0x42,
				0x42,
				0x28,
				0x28,
				0x28,
				0x42,
				0x28,
				0x62,
				0x62,
				0x48,
				0x48,
				0x48,
				0x62,
				0x48,
				0x82,
				0x82,
				0x68,
				0x68,
				0x68,
				0x82,
				0x68,
				0x42,
				0x62,
				0x82,
				0x28,
				0x48,
				0x68,
				0x28,
				0x48,
				0x68,
				0x42,
				0x62,
				0x82,
				// GENERATOR-END: MemorySizes
			};

			for (int i = 0; i < infos.Length; i++) {
				var d = data[i];
				var keywords = (d & MemoryKeywordsMask) switch {
					// GENERATOR-BEGIN: MemoryKeywordsSwitch
					// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
					0x00 => Array2.Empty<FormatterString>(),
					0x01 => byte_ptr,
					0x02 => dword_ptr,
					0x03 => fpuenv14_ptr,
					0x04 => fpuenv28_ptr,
					0x05 => fpustate108_ptr,
					0x06 => fpustate94_ptr,
					0x07 => fword_ptr,
					0x08 => qword_ptr,
					0x09 => tbyte_ptr,
					0x0A => word_ptr,
					0x0B => xmmword_ptr,
					0x0C => ymmword_ptr,
					0x0D => zmmword_ptr,
					0x0E => mem384_ptr,
					// GENERATOR-END: MemoryKeywordsSwitch
					_ => throw new InvalidOperationException(),
				};
				var bcstTo = (d >> BroadcastToKindShift) switch {
					// GENERATOR-BEGIN: BroadcastToKindSwitch
					// ‚ö†Ô∏èThis was generated by GENERATOR!ü¶π‚Äç‚ôÇÔ∏è
					0x00 => empty,
					0x01 => b1to2,
					0x02 => b1to4,
					0x03 => b1to8,
					0x04 => b1to16,
					// GENERATOR-END: BroadcastToKindSwitch
					_ => throw new InvalidOperationException(),
				};
				infos[i] = new Info(keywords, bcstTo);
			}

			return infos;
		}
	}
}
#endif
